{"title":"CPP第四次上机实验","uid":"b294dc564007bd3ddd0057552526566b","slug":"CPP第四次上机实验","date":"2022-09-08T01:55:40.000Z","updated":"2023-02-28T17:40:55.247Z","comments":true,"path":"api/articles/CPP第四次上机实验.json","keywords":null,"cover":null,"content":"<h2 id=\"题目理解\"><a href=\"#题目理解\" class=\"headerlink\" title=\"题目理解\"></a><strong>题目理解</strong></h2><p>我对题目的理解是讲PPT中类的双向关联程序改为单向关联程序，并在main函数中调用。</p>\n<h2 id=\"程序难点及解决思路\"><a href=\"#程序难点及解决思路\" class=\"headerlink\" title=\"程序难点及解决思路\"></a><strong>程序难点及解决思路</strong></h2><p>本次的程序难点在于如何将双向关联改为单向关联，PPT中给出的方案是在Male类中设立一个静态的数组储存每一个新建的Male类，Male类中还储存了Female类，Female类定义一个Male* gethusband()函数通过访问Male的静态数组从而访问Male类，若此Male类中的Female类就是自身，则返回这个Male类。</p>\n<h2 id=\"心得体会\"><a href=\"#心得体会\" class=\"headerlink\" title=\"心得体会\"></a><strong>心得体会</strong></h2><p>为了显示每一个Male类与Female类的对应关系，我在两类中加入了新的变量string name用于储存每一位的姓名，随后定义Male和Female类静态函数用于输出每一位对应关系，这样可以更直接的看出对应的关系。</p>\n<h2 id=\"我的收获\"><a href=\"#我的收获\" class=\"headerlink\" title=\"我的收获\"></a><strong>我的收获</strong></h2><p>此次收获在于加深了对静态数据已经静态函数的了解。并且对类的相关学习有了更深的理解。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a><strong>代码实现</strong></h2><p><strong><a href=\"https://github.com/LeoMeng86/JLU_cpp_experiment.git\">https://github.com/LeoMeng86/JLU_cpp_experiment.git</a></strong></p>\n","text":"题目理解我对题目的理解是讲PPT中类的双向关联程序改为单向关联程序，并在main函数中调用。 程序难点及解决思路本次的程序难点在于如何将双向关联改为单向关联，PPT中给出的方案是在Male类中设立一个静态的数组储存每一个新建的Male类，Male类中还储存了Female类，Fem...","link":"","photos":[],"count_time":{"symbolsCount":439,"symbolsTime":"1 mins."},"categories":[{"name":"C&C++","slug":"C-C","count":8,"path":"api/categories/C-C.json"}],"tags":[{"name":"CPP","slug":"CPP","count":8,"path":"api/tags/CPP.json"},{"name":"编程","slug":"编程","count":14,"path":"api/tags/编程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">题目理解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E9%9A%BE%E7%82%B9%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">程序难点及解决思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A\"><span class=\"toc-text\">心得体会</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%91%E7%9A%84%E6%94%B6%E8%8E%B7\"><span class=\"toc-text\">我的收获</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol>","author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP第五次上机实验","uid":"574b7681991a8086c7052a1109c708c0","slug":"CPP第五次上机实验","date":"2022-09-08T01:55:52.000Z","updated":"2023-02-28T17:40:56.524Z","comments":true,"path":"api/articles/CPP第五次上机实验.json","keywords":null,"cover":[],"text":"类微信通信。 利用TCP&#x2F;IP技术，实现点对点通信，实现利用socket通信的连接、发送和接收；建立收发界面；收发需要同时；不必考虑安卓系统。 需要解决的技术问题： （1）socket通信的基本原理耦合使用 （2）多线程编程 题目要求使用套接字（socket）实现TCP...","link":"","photos":[],"count_time":{"symbolsCount":634,"symbolsTime":"1 mins."},"categories":[{"name":"C&C++","slug":"C-C","count":8,"path":"api/categories/C-C.json"}],"tags":[{"name":"CPP","slug":"CPP","count":8,"path":"api/tags/CPP.json"},{"name":"编程","slug":"编程","count":14,"path":"api/tags/编程.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP第三次上机实验","uid":"60136b05a7965396e962d3122dd90a33","slug":"CPP第三次上机实验","date":"2022-09-08T01:55:21.000Z","updated":"2023-02-28T17:40:56.624Z","comments":true,"path":"api/articles/CPP第三次上机实验.json","keywords":null,"cover":null,"text":"地图导航模拟算法。在一个无向图中任意给定两点实现最短路径计算。要求采用Dijkstra（深度或广度或Floyd或Bellman-Ford）算法，以及堆排序算法或其它排序算法，利用递归，vector支持邻接表方式，对于路径和选择路径进行界面显示（可仅仅显示而不交互）。主要目的：ve...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"C&C++","slug":"C-C","count":8,"path":"api/categories/C-C.json"}],"tags":[{"name":"CPP","slug":"CPP","count":8,"path":"api/tags/CPP.json"},{"name":"编程","slug":"编程","count":14,"path":"api/tags/编程.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}