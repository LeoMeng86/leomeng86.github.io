{"title":"数据结构第二次上机实验","uid":"407b137722e04956b74ff31b7ce67773","slug":"数据结构第二次上机实验","date":"2022-09-06T03:30:53.000Z","updated":"2023-02-28T17:40:58.061Z","comments":true,"path":"api/articles/数据结构第二次上机实验.json","keywords":null,"cover":null,"content":"<h2 id=\"第一题：二叉树最长路径\"><a href=\"#第一题：二叉树最长路径\" class=\"headerlink\" title=\"第一题：二叉树最长路径\"></a><strong>第一题：二叉树最长路径</strong></h2><p>给定一棵二叉树T，求T中的最长路径的长度，并输出此路径上各结点的值。若有多条最长路径，输出最右侧的那条。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，1个整数n，表示二叉树有n个结点， 1≤n≤100000.</p>\n<p>第2行，2n+1个整数，用空格分隔，表示T的扩展先根序列， -1表示空指针，结点用编号1到n表示。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>第1行，1个整数length，length表示T中的最长路径的长度。</p>\n<p>第2行，length+1个整数，用空格分隔，表示最右侧的最长路径。</p>\n<h3 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">5\n1 2 -1 -1 3 4 -1 -1 5 -1 -1</code></pre>\n\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2\n1 3 5</code></pre>\n\n<h3 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：树的遍历\"><a href=\"#方法一：树的遍历\" class=\"headerlink\" title=\"方法一：树的遍历\"></a>方法一：树的遍历</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nusing namespace std;\n\nstruct Tree\n&#123;\n    int left;\n    int right;\n&#125; tree[100001];\n\nint heigth[100001];\nint path[100001] &#x3D; &#123;0&#125;;\n\nint init()\n&#123;\n    int tmp &#x3D; 0;\n    cin &gt;&gt; tmp;\n    if (tmp !&#x3D; -1)\n    &#123;\n        tree[tmp].left &#x3D; init();\n        tree[tmp].right &#x3D; init();\n    &#125;\n    return tmp;\n&#125;\n\nvoid depth(int node)\n&#123;\n    if (node !&#x3D; -1)\n    &#123;\n        heigth[node] &#x3D; 1;\n        if (tree[node].right !&#x3D; -1)\n        &#123;\n            depth(tree[node].right);\n            if (heigth[node] &lt; heigth[tree[node].right] + 1)\n                heigth[node] &#x3D; heigth[tree[node].right] + 1;\n            path[node] &#x3D; tree[node].right;\n        &#125;\n        if (tree[node].left !&#x3D; -1)\n        &#123;\n            depth(tree[node].left);\n            if (heigth[node] &lt; heigth[tree[node].left] + 1)\n                heigth[node] &#x3D; heigth[tree[node].left] + 1;\n            if (tree[node].left &#x3D;&#x3D; -1 || heigth[tree[node].right] &lt; heigth[tree[node].left])\n            &#123;\n                path[node] &#x3D; tree[node].left;\n            &#125;\n        &#125;\n    &#125;\n    else\n        return;\n&#125;\n\nint main()\n&#123;\n    int n &#x3D; 0;\n    cin &gt;&gt; n;\n\n    int root &#x3D; init();\n    depth(root);\n\n    printf(&quot;%d\\n&quot;, heigth[root] - 1);\n\n    while (root !&#x3D; 0)\n    &#123;\n        printf(&quot;%d&quot;, root);\n        root &#x3D; path[root];\n        if (root !&#x3D; 0)\n            printf(&quot; &quot;);\n    &#125;\n\n    printf(&quot;\\n&quot;);\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第二题：森林的层次遍历\"><a href=\"#第二题：森林的层次遍历\" class=\"headerlink\" title=\"第二题：森林的层次遍历\"></a><strong>第二题：森林的层次遍历</strong></h2><p>给定一个森林F，求F的层次遍历序列。森林由其先根序列及序列中每个结点的度给出。</p>\n<h3 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，1个整数n，表示森林的结点个数， 1≤n≤100000.</p>\n<p>第2行，n个字符，用空格分隔，表示森林F的先根序列。字符为大小写字母及数字。</p>\n<p>第3行，n个整数，用空格分隔，表示森林F的先根序列中每个结点对应的度。</p>\n<h3 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>1行，n个字符，用空格分隔，表示森林F的层次遍历序列。</p>\n<h3 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">14\nA B C D E F G H I J K L M N\n4 0 3 0 0 0 0 2 2 0 0 0 1 0</code></pre>\n\n<h3 id=\"输出样例-1\"><a href=\"#输出样例-1\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">A M B C G H N D E F I L J K</code></pre>\n\n<h3 id=\"题目解析-1\"><a href=\"#题目解析-1\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：森林的层次遍历\"><a href=\"#方法一：森林的层次遍历\" class=\"headerlink\" title=\"方法一：森林的层次遍历\"></a>方法一：森林的层次遍历</h4><h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;queue&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nint n, cnt &#x3D; 0;\nchar data_x[100010];\nint val[100010];\nvector&lt;int&gt;son[100010];\n\nint build() &#123;\n\tint num;\n\tnum &#x3D; cnt++;\n\tfor (int i &#x3D; 0; i &lt; val[num]; i++) &#123;\n\t\tson[num].push_back(build());\n\t&#125;\n\treturn num;\n&#125;\n\nint main() &#123;\n\tcin &gt;&gt; n;\n\tfor (int i &#x3D; 0; i &lt; n; i++) &#123;\n\t\tcin &gt;&gt; data_x[i];\n\t&#125;\n\tfor (int i &#x3D; 0; i &lt; n; i++) &#123;\n\t\tcin &gt;&gt; val[i];\n\t&#125;\n\n\tqueue&lt;int&gt;q;\n\n\twhile (cnt !&#x3D; n) &#123;\n\t\tint node;\n\t\tnode &#x3D; build();\n\t\tq.push(node);\n\t&#125;\n\n\twhile (!q.empty()) &#123;\n\t\tint y;\n\t\ty &#x3D; q.front();\n\t\tq.pop();\n\t\tcout &lt;&lt; data_x[y];\n\t\tfor (int i &#x3D; 0; i &lt; val[y]; i++) &#123;\n\t\t\tq.push(son[y][i]);\n\t\t&#125;\n        if(!q.empty()) cout &lt;&lt; &quot; &quot;;\n\t&#125;\n    \n    cout &lt;&lt; &quot;\\n&quot;;\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第三题：纸带切割\"><a href=\"#第三题：纸带切割\" class=\"headerlink\" title=\"第三题：纸带切割\"></a><strong>第三题：纸带切割</strong></h2><p>有一条细长的纸带,长度为 L 个单位，宽度为一个单位。现在要将纸带切割成 n 段。每次切割把当前纸带分成两段，切割位置都在整数单位上，切割代价是当前切割纸带的总长度。每次切割都选择未达最终要求的最长纸带切割，若这样的纸带有多条，则任选一条切割。如何切割，才能完成任务，并且总代价最小。</p>\n<h3 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，1个整数n，表示切割成的段数， 1≤n≤100000.</p>\n<p>第2行，n个整数Li，用空格分隔，表示要切割成的各段的长度，1≤Li≤200000000，1≤i≤n.</p>\n<h3 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>第1行，1个整数，表示最小的总代价。</p>\n<p>第2行，若干个整数，用空格分隔，表示总代价最小时每次切割的代价。</p>\n<h3 id=\"输入样例-2\"><a href=\"#输入样例-2\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">5\n5 6 7 2 4</code></pre>\n\n<h3 id=\"输出样例-2\"><a href=\"#输出样例-2\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">54\n24 13 11 6</code></pre>\n\n<h3 id=\"题目解析-2\"><a href=\"#题目解析-2\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：哈夫曼合并\"><a href=\"#方法一：哈夫曼合并\" class=\"headerlink\" title=\"方法一：哈夫曼合并\"></a>方法一：哈夫曼合并</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;stack&gt;\n#include&lt;vector&gt;\n#include&lt;queue&gt;\nusing namespace std;\n\npriority_queue&lt;long long, vector&lt;long long&gt;, greater&lt;long long&gt;&gt; list;\nstack&lt;long long&gt; result;\nlong long cost &#x3D; 0;\n\nint main()\n&#123;\n    int n;\n    cin &gt;&gt; n;\n    for(int i &#x3D; 0; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        long long tmp;\n        cin &gt;&gt; tmp;\n        list.push(tmp);\n    &#125;\n    while(list.size() &gt; 1)\n    &#123;\n        long long a, b;\n        a &#x3D; list.top();\n        list.pop();\n        b &#x3D; list.top();\n        list.pop();\n        list.push(a+b);\n        result.push(a+b);\n        cost +&#x3D; (a+b);\n    &#125;\n    cout &lt;&lt; cost &lt;&lt; endl;\n    while(!result.empty())\n    &#123;\n        cout &lt;&lt; result.top();\n        result.pop();\n        if(!result.empty()) cout &lt;&lt; &quot; &quot;;\n    &#125;\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第四题：序列乘积\"><a href=\"#第四题：序列乘积\" class=\"headerlink\" title=\"第四题：序列乘积\"></a><strong>第四题：序列乘积</strong></h2><p>两个递增序列A和B,长度都是n。令 Ai 和 Bj 做乘积，1≤i,j≤n.请输出n*n个乘积中从小到大的前n个。</p>\n<h3 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，1个整数n，表示序列的长度， 1≤n≤100000.</p>\n<p>第2行，n个整数Ai，用空格分隔，表示序列A，1≤Ai≤40000，1≤i≤n.</p>\n<p>第3行，n个整数Bi，用空格分隔，表示序列B，1≤Bi≤40000，1≤i≤n.</p>\n<h3 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>1行，n个整数，用空格分隔，表示序列乘积中的从小到大前n个。</p>\n<h3 id=\"输入样例-3\"><a href=\"#输入样例-3\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">5\n1 3 5 7 9 \n2 4 6 8 10</code></pre>\n\n<h3 id=\"输出样例-3\"><a href=\"#输出样例-3\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2 4 6 6 8</code></pre>\n\n<h3 id=\"题目解析-3\"><a href=\"#题目解析-3\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：STL-priority-queue\"><a href=\"#方法一：STL-priority-queue\" class=\"headerlink\" title=\"方法一：STL priority_queue\"></a>方法一：STL priority_queue</h4><p>先将第一行入队（大根堆），然后遍历每一列，弹出堆顶元素，将当前元素压入堆中，直到出现第一个不在前n个的，开始遍历下一列。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;queue&gt;\nusing namespace std;\npriority_queue&lt;int , vector&lt;int&gt;, less&lt;int&gt;&gt; list;\nint a[100001], b[100001];\nint n;\nint main()\n&#123;\n    cin &gt;&gt; n;\n    for(int i &#x3D; 0; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        cin &gt;&gt; a[i];\n    &#125;\n    for(int i &#x3D; 0; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        cin &gt;&gt; b[i];\n    &#125;\n    for(int i &#x3D; 0; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        list.push(a[0] * b[i]);\n    &#125;\n    for(int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        for(int j &#x3D; 0; j &lt;&#x3D; n - 1; j++)\n        &#123;\n            if(a[i]* b[j] &lt; list.top())\n            &#123;\n                list.pop();\n                list.push(a[i]* b[j]);\n            &#125;\n            else break;\n        &#125;\n    &#125;\n    int *tmp &#x3D; new int[n];\n    for(int i &#x3D; 0; i &lt;&#x3D; n - 1; i++)\n    &#123;\n        tmp[i] &#x3D; list.top();\n        list.pop();\n    &#125;\n    for(int i &#x3D; n - 1; i &gt;&#x3D; 0;i--)\n    &#123;\n        cout &lt;&lt; tmp[i];\n        if(i !&#x3D; 0) cout &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n    delete[]tmp;\n    return 0;\n&#125;</code></pre>\n\n","text":"第一题：二叉树最长路径给定一棵二叉树T，求T中的最长路径的长度，并输出此路径上各结点的值。若有多条最长路径，输出最右侧的那条。 输入格式第1行，1个整数n，表示二叉树有n个结点， 1≤n≤100000. 第2行，2n+1个整数，用空格分隔，表示T的扩展先根序列， -1表示空指针，...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":14,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E9%95%BF%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">第一题：二叉树最长路径</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">方法一：树的遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E6%A3%AE%E6%9E%97%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">第二题：森林的层次遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-1\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%A3%AE%E6%9E%97%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">方法一：森林的层次遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%9A%E7%BA%B8%E5%B8%A6%E5%88%87%E5%89%B2\"><span class=\"toc-text\">第三题：纸带切割</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-2\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%93%88%E5%A4%AB%E6%9B%BC%E5%90%88%E5%B9%B6\"><span class=\"toc-text\">方法一：哈夫曼合并</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%A2%98%EF%BC%9A%E5%BA%8F%E5%88%97%E4%B9%98%E7%A7%AF\"><span class=\"toc-text\">第四题：序列乘积</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-3\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9ASTL-priority-queue\"><span class=\"toc-text\">方法一：STL priority_queue</span></a></li></ol></li></ol></li></ol>","author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构第三次上机实验","uid":"9273a260bb46152a3f86150e633d4306","slug":"数据结构第三次上机实验","date":"2022-09-06T03:59:53.000Z","updated":"2023-02-28T17:40:58.041Z","comments":true,"path":"api/articles/数据结构第三次上机实验.json","keywords":null,"cover":null,"text":"第一题：连通分量无向图 G 有 n 个顶点和 m 条边。求 G 的连通分量的数目。 输入格式：第1行，2个整数n和m，用空格分隔，分别表示顶点数和边数， 1≤n≤50000， 1≤m≤100000. 第2到m+1行，每行两个整数u和v，用空格分隔，表示顶点u到顶点v有一条边，u和...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":6,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":14,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":6,"path":"api/tags/数据结构.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}