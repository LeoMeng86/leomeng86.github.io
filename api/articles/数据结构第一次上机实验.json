{"title":"数据结构第一次上机实验","uid":"18130e5d5310914bcb5bf033ca30cfcc","slug":"数据结构第一次上机实验","date":"2022-09-06T03:00:53.000Z","updated":"2023-02-28T17:40:58.126Z","comments":true,"path":"api/articles/数据结构第一次上机实验.json","keywords":null,"cover":null,"content":"<h2 id=\"第一题：数列查询\"><a href=\"#第一题：数列查询\" class=\"headerlink\" title=\"第一题：数列查询\"></a>第一题：数列查询</h2><p>已知数列的通项公式为:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">f(n) &#x3D; f(n-1)*11&#x2F;10，f[1]&#x3D;10. </code></pre>\n\n<p>通项从左向右计算，*和&#x2F;分别表示整数乘法和除法。<br>现在，要多次查询数列项的值。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，1个整数q，表示查询的次数， 1≤q≤10000.<br>第2至q+1行，每行1个整数i，表示要查询f(i)的值。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>q行，每行1个整数，表示f(i)的值。查询的值都在32位整数范围内。</p>\n<h3 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">3\n1\n2\n3</code></pre>\n\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">10\n11\n12</code></pre>\n\n<h3 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：全结果缓存\"><a href=\"#方法一：全结果缓存\" class=\"headerlink\" title=\"方法一：全结果缓存\"></a>方法一：全结果缓存</h4><p>这样每次查询的代价是O(1)级。</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;stack&gt;\n#include &lt;queue&gt;\nusing namespace std;\nint n,s,val[10000];\nint main()&#123;\n\tval[1]&#x3D;10;\n\tcin &gt;&gt; n;\n\tfor(int i&#x3D;2;i&lt;&#x3D;202;i++)&#123;\n\t\tval[i]&#x3D;val[i-1]*11&#x2F;10;\n\t&#125;\n\twhile(n--)&#123;\n\t\tscanf(&quot;%d&quot;,&amp;s);\n\t\tprintf(&quot;%d\\n&quot;,val[s]);\n\t&#125;\n\treturn 0; \n&#125;</code></pre>\n\n<h2 id=\"第二题：报数游戏\"><a href=\"#第二题：报数游戏\" class=\"headerlink\" title=\"第二题：报数游戏\"></a><strong>第二题：报数游戏</strong></h2><p>n个人围成一圈，从1开始依次编号，做报数游戏。 现指定从第1个人开始报数，报数到第m个人时，该人出圈，然后从其下一个人重新开始报数，仍是报数到第m个人出圈，如此重复下去，直到所有人都出圈。总人数不足m时将循环报数。请输出所有人出圈的顺序。</p>\n<h3 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>一行，两个整数n和m。n表示游戏的人数，m表示报数出圈的数字，1≤n≤50000，1≤m≤100.</p>\n<h3 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一行，n个用空格分隔的整数，表示所有人出圈的顺序</p>\n<h3 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">5 2</code></pre>\n\n<h3 id=\"输出样例-1\"><a href=\"#输出样例-1\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2 4 1 5 3</code></pre>\n\n<h3 id=\"题目解析-1\"><a href=\"#题目解析-1\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：使用vector模拟循环链表\"><a href=\"#方法一：使用vector模拟循环链表\" class=\"headerlink\" title=\"方法一：使用vector模拟循环链表\"></a>方法一：使用vector模拟循环链表</h4><h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\n#include&lt;vector&gt;\nusing namespace std;\nint main()\n&#123;\n\tvector&lt;int&gt;vec;\n\tint n, m;\n\tcin &gt;&gt; n  &gt;&gt; m;\n\tfor (int i &#x3D; 1; i &lt;&#x3D; n; i++)\n\t&#123;\n\t\tvec.push_back(i);\n\t&#125;\n\tauto p &#x3D; vec.begin();\n\twhile(vec.size()-1)\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; m-1; j++)\n\t\t&#123;\n\t\t\tp++;\n\t\t\tif (p &#x3D;&#x3D; vec.end())\n\t\t\t\tp &#x3D; vec.begin();\n\t\t&#125;\n\t\tcout &lt;&lt; *p &lt;&lt; &quot; &quot;;\n\t\tp &#x3D; vec.erase(p);\n\t\tif (p &#x3D;&#x3D; vec.end())\n\t\t\tp &#x3D; vec.begin();\n\t&#125;\n    cout &lt;&lt; vec[0];\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第三题：算术表达式计算\"><a href=\"#第三题：算术表达式计算\" class=\"headerlink\" title=\"第三题：算术表达式计算\"></a><strong>第三题：算术表达式计算</strong></h2><p>任务: 计算算术表达式的值。</p>\n<p>算术表达式按中缀给出，以&#x3D;号结束，包括+,-,,&#x2F;四种运算和(、)分隔符。运算数的范围是非负整数，没有正负符号，小于等于109 。</p>\n<p>计算过程中,如果出现除数为0的情况,表达式的结果为”NaN” ; 如果中间结果超出32位有符号整型范围,仍按整型计算，不必特殊处理。<br>输入保证表达式正确。</p>\n<h3 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>一行，包括1个算术表达式。算术表达式的长度小于等于1000。</p>\n<h3 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一行，算术表达式的值 。</p>\n<h3 id=\"输入样例-2\"><a href=\"#输入样例-2\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">(1+30)&#x2F;3&#x3D;</code></pre>\n\n<h3 id=\"输出样例-2\"><a href=\"#输出样例-2\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">10</code></pre>\n\n<h3 id=\"题目解析-2\"><a href=\"#题目解析-2\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：使用栈完成后缀表达式的计算-高精度\"><a href=\"#方法一：使用栈完成后缀表达式的计算-高精度\" class=\"headerlink\" title=\"方法一：使用栈完成后缀表达式的计算+高精度\"></a>方法一：使用栈完成后缀表达式的计算+高精度</h4><h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;stack&gt;\n#include &lt;cstring&gt;\n#include &lt;stdlib.h&gt;\nusing namespace std;\n\nint priority(char a)\n&#123;\n    int prior &#x3D; 0;\n    if (a &#x3D;&#x3D; &#39;(&#39;)\n        prior &#x3D; 0;\n    if (a &#x3D;&#x3D; &#39;-&#39; || a &#x3D;&#x3D; &#39;+&#39;)\n        prior &#x3D; 1;\n    if (a &#x3D;&#x3D; &#39;&#x2F;&#39; || a &#x3D;&#x3D; &#39;*&#39;)\n        prior &#x3D; 2;\n    return prior;\n&#125;\n\n\nint main()\n&#123;\n    string str;\n    cin &gt;&gt; str;\n    int s1[1000];\n    memset(s1, 0, sizeof(s1));\n    char s2[1000];\n    int top1 &#x3D; 0, top2 &#x3D; 0;\n    int num;\n    bool flag &#x3D; 0;\n    int len &#x3D; str.size();\n    for (int i &#x3D; 0; i &lt;&#x3D; len - 1; i++)\n    &#123;\n        num &#x3D; 0;\n        while (str[i] &gt;&#x3D; &#39;0&#39; &amp;&amp; str[i] &lt;&#x3D; &#39;9&#39;)\n        &#123;\n            num &#x3D; num * 10 + str[i] - &#39;0&#39;;\n            i++;\n            flag &#x3D; 1;\n        &#125;\n        if (flag)\n        &#123;\n            flag &#x3D; 0;\n            s1[top1++] &#x3D; num;\n            num &#x3D; 0;\n        &#125;\n        if (str[i] &#x3D;&#x3D; &#39;&#x3D;&#39;)\n            break;\n        else if (!(str[i] &gt;&#x3D; &#39;0&#39; &amp;&amp; str[i] &lt;&#x3D; &#39;9&#39;))\n        &#123;\n            if (top2&#x3D;&#x3D;0)\n                s2[top2++] &#x3D; str[i];\n            else if (str[i] &#x3D;&#x3D; &#39;(&#39;)\n                s2[top2++] &#x3D; str[i];\n            else if (str[i] &#x3D;&#x3D; &#39;*&#39; || str[i] &#x3D;&#x3D; &#39;&#x2F;&#39; || str[i] &#x3D;&#x3D; &#39;-&#39; || str[i] &#x3D;&#x3D; &#39;+&#39;)\n            &#123;\n                while (priority(str[i]) &lt;&#x3D; priority(s2[top2 - 1]))\n                &#123;\n                    int x, y;\n                    y &#x3D; s1[--top1];\n                    x &#x3D; s1[--top1];\n                    switch (s2[top2-1])\n                    &#123;\n                    case &#39;+&#39;:\n                        s1[top1++] &#x3D; x + y;\n                        break;\n                    case &#39;-&#39;:\n                        s1[top1++] &#x3D; x - y;\n                        break;\n                    case &#39;*&#39;:\n                        s1[top1++] &#x3D; x * y;\n                        break;\n                    case &#39;&#x2F;&#39;:\n                    &#123;\n                        if (y &#x3D;&#x3D; 0)\n                        &#123;\n                            std::cout &lt;&lt; &quot;NaN&quot;;\n                            return 0;\n                        &#125;\n                        else\n                            s1[top1++] &#x3D; x &#x2F; y;\n                        break;\n                    &#125;\n                    default:\n                        break;\n                    &#125;\n                    top2--;\n                &#125;\n                if (priority(str[i]) &gt; priority(s2[top2 - 1]))\n                &#123;\n                    s2[top2++] &#x3D; str[i];\n                &#125;\n            &#125;\n            if (str[i] &#x3D;&#x3D; &#39;)&#39;)\n            &#123;\n                while (s2[top2- 1] !&#x3D; &#39;(&#39;)\n                &#123;\n                    int x, y;\n                    y &#x3D; s1[--top1];\n                    x &#x3D; s1[--top1];\n                    switch (s2[top2-1])\n                    &#123;\n                    case &#39;+&#39;:\n                        s1[top1++] &#x3D; x+y;\n                        break;\n                    case &#39;-&#39;:\n                        s1[top1++] &#x3D; x-y;\n                        break;\n                    case &#39;*&#39;:\n                        s1[top1++] &#x3D; x*y;\n                        break;\n                    case &#39;&#x2F;&#39;:\n                    &#123;\n                        if (y &#x3D;&#x3D; 0)\n                        &#123;\n                            std::cout &lt;&lt; &quot;NaN&quot;;\n                            return 0;\n                        &#125;\n                        else\n                            s1[top1++] &#x3D; x&#x2F;y;\n                        break;\n                    &#125;\n                    default:\n                        break;\n                    &#125;\n                    top2--;\n                &#125;\n                top2--;\n            &#125;\n        &#125;\n    &#125;\n    while (top2 !&#x3D; 0)\n    &#123;\n        int x, y;\n        y &#x3D; s1[--top1];\n        x &#x3D; s1[--top1];\n        switch (s2[top2 - 1])\n        &#123;\n        case &#39;+&#39;:\n            s1[top1++] &#x3D; x + y;\n            break;\n        case &#39;-&#39;:\n            s1[top1++] &#x3D; x - y;\n            break;\n        case &#39;*&#39;:\n            s1[top1++] &#x3D; x * y;\n            break;\n        case &#39;&#x2F;&#39;:\n        &#123;\n            if (y &#x3D;&#x3D; 0)\n            &#123;\n                std::cout &lt;&lt; &quot;NaN&quot;;\n                return 0;\n            &#125;\n            else\n                s1[top1++] &#x3D; x &#x2F; y;\n            break;\n        &#125;\n\n        default:\n            break;\n        &#125;\n        top2--;\n    &#125;\n    std::cout &lt;&lt; s1[top1 -1];\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第四题：最喜爱的序列\"><a href=\"#第四题：最喜爱的序列\" class=\"headerlink\" title=\"第四题：最喜爱的序列\"></a><strong>第四题：最喜爱的序列</strong></h2><p> 小唐这段时间在研究序列。拿来N个整数的序列，他给序列中的每个整数都赋予一个喜爱值。喜爱值也是整数，有正有负，越大表明越喜欢。他想知道，如何从序列中连续取最多m个数，他获得喜爱值最大。1≤N≤500000，1≤m≤N。</p>\n<h3 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行是两个整数N,m。分别代表序列中数的个数以及能取的最多个数。</p>\n<p>第二行用空格隔开的N个整数，第i个整数Li代表他对第i个数的喜爱值。│Li│≤1000</p>\n<h3 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一行，三个数，表示获得最大喜爱值，及第一个取最大喜爱值的区间。</p>\n<h3 id=\"输入样例-3\"><a href=\"#输入样例-3\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">5 2\n1 4 5 2 3</code></pre>\n\n<h3 id=\"输出样例-3\"><a href=\"#输出样例-3\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">9 2 3</code></pre>\n\n<h3 id=\"题目解析-3\"><a href=\"#题目解析-3\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：单调队列\"><a href=\"#方法一：单调队列\" class=\"headerlink\" title=\"方法一：单调队列\"></a>方法一：单调队列</h4><h5 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;algorithm&gt;\n#include&lt;deque&gt;\nconst int maxn&#x3D; 500010;\nusing namespace std;\nint main()&#123;\n\tint n,m;\n\tdeque&lt;int&gt; Q;\n\tint i,x,max,j,front,end;\n\tint val[maxn];\n\tcin&gt;&gt; n &gt;&gt; m;\n\tval[0]&#x3D;0;\n\tfor(i&#x3D;1;i&lt;&#x3D;n;i++)&#123;\n\t\tscanf(&quot;%d&quot;,&amp;x);\n\t\tval[i]&#x3D;x+val[i-1];\n\t&#125;\n    max&#x3D;0;\n    \n    for(i&#x3D;1;i&lt;&#x3D;n;i++)&#123;\n    \twhile(!Q.empty()&amp;&amp;\n              val[Q.front()]&gt;val[i]) Q.pop_front();\n    \tQ.push_front(i);\n    \twhile(!Q.empty()&amp;&amp;Q.back()&lt;i-m) Q.pop_back();\n    \tif(max&lt;val[i]-val[Q.back()])&#123; \n    \t\tmax&#x3D;val[i]-val[Q.back()];\n    \t\tfront&#x3D;Q.back()+1;\n    \t\tend&#x3D;i;\n\t\t&#125;\n\t&#125;\n\tprintf(&quot;%d %d %d&quot;,max,front,end);\n\treturn 0;\n&#125;</code></pre>\n\n","text":"第一题：数列查询已知数列的通项公式为: f(n) &#x3D; f(n-1)*11&#x2F;10，f[1]&#x3D;10. 通项从左向右计算，*和&#x2F;分别表示整数乘法和除法。现在，要多次查询数列项的值。 输入格式第1行，1个整数q，表示查询的次数， 1≤q≤10000...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":7,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":15,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":7,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9A%E6%95%B0%E5%88%97%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">第一题：数列查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%85%A8%E7%BB%93%E6%9E%9C%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">方法一：全结果缓存</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E6%8A%A5%E6%95%B0%E6%B8%B8%E6%88%8F\"><span class=\"toc-text\">第二题：报数游戏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-1\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E4%BD%BF%E7%94%A8vector%E6%A8%A1%E6%8B%9F%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">方法一：使用vector模拟循环链表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%9A%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">第三题：算术表达式计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-2\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%A0%88%E5%AE%8C%E6%88%90%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E8%AE%A1%E7%AE%97-%E9%AB%98%E7%B2%BE%E5%BA%A6\"><span class=\"toc-text\">方法一：使用栈完成后缀表达式的计算+高精度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%A2%98%EF%BC%9A%E6%9C%80%E5%96%9C%E7%88%B1%E7%9A%84%E5%BA%8F%E5%88%97\"><span class=\"toc-text\">第四题：最喜爱的序列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-3\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97\"><span class=\"toc-text\">方法一：单调队列</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据结构第二次上机实验","uid":"407b137722e04956b74ff31b7ce67773","slug":"数据结构第二次上机实验","date":"2022-09-06T03:30:53.000Z","updated":"2023-02-28T17:40:58.061Z","comments":true,"path":"api/articles/数据结构第二次上机实验.json","keywords":null,"cover":null,"text":"第一题：二叉树最长路径给定一棵二叉树T，求T中的最长路径的长度，并输出此路径上各结点的值。若有多条最长路径，输出最右侧的那条。 输入格式第1行，1个整数n，表示二叉树有n个结点， 1≤n≤100000. 第2行，2n+1个整数，用空格分隔，表示T的扩展先根序列， -1表示空指针，...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":7,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":15,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":7,"path":"api/tags/数据结构.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}