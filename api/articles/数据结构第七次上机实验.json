{"title":"数据结构第七次上机实验","uid":"82c87e7d3d5a50c5b7d55245f7119e74","slug":"数据结构第七次上机实验","date":"2022-09-06T04:32:32.000Z","updated":"2023-02-28T17:40:59.499Z","comments":true,"path":"api/articles/数据结构第七次上机实验.json","keywords":null,"cover":null,"content":"<h2 id=\"第一题：序列调度\"><a href=\"#第一题：序列调度\" class=\"headerlink\" title=\"第一题：序列调度\"></a><strong>第一题：序列调度</strong></h2><p>有一个N个数的序列A：1，2，……，N。有一个后进先出容器D，容器的容量为C。如果给出一个由1到N组成的序列，那么可否由A使用容器D的插入和删除操作得到。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，2个整数T和C，空格分隔，分别表示询问的组数和容器的容量，1≤T≤10，1≤C≤N。</p>\n<p>第2到T+1行，每行的第1个整数N，表示序列的元素数，1≤N≤10000。接下来N个整数，表示询问的序列。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>T行。若第i组的序列能得到，第i行输出Yes；否则，第i行输出No,1≤i≤T。</p>\n<h3 id=\"输入样例\"><a href=\"#输入样例\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2 2\n5 1 2 5 4 3\n4 1 3 2 4</code></pre>\n\n<h3 id=\"输出样例\"><a href=\"#输出样例\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">No\nYes</code></pre>\n\n<h3 id=\"题目解析\"><a href=\"#题目解析\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：栈模拟法\"><a href=\"#方法一：栈模拟法\" class=\"headerlink\" title=\"方法一：栈模拟法\"></a>方法一：栈模拟法</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;stack&gt;\n\nusing namespace std;\n\nint t, c, cnt, key[10001];\n\nstack&lt;int&gt; s;\n\nbool flag &#x3D; true;\n\nint main()\n&#123;\n    scanf(&quot;%d%d&quot;, &amp;t, &amp;c);\n    for(int i &#x3D; 0; i &lt;&#x3D; t - 1; i++)\n    &#123;\n        scanf(&quot;%d&quot;, &amp;cnt);\n        flag &#x3D; 1;\n        int top &#x3D; 1;\n        while(!s.empty()) s.pop();\n        for(int j &#x3D; 0; j &lt;&#x3D; cnt - 1; j++)\n        &#123;\n            scanf(&quot;%d&quot;, &amp;key[j]);\n        &#125;\n        for(int j &#x3D; 0; j &lt;&#x3D; cnt - 1; j++)\n        &#123;\n            if(!flag) continue;\n            while(key[j] &gt;&#x3D; top)\n            &#123;\n                s.push(top++);\n            &#125;\n            if(key[j] &#x3D;&#x3D; top)\n            &#123;\n                top++;\n                continue;\n            &#125;\n            if(s.size() &gt; c)\n            &#123;\n                flag &#x3D; false;\n                break;\n            &#125;\n            if(key[j] &lt; top)\n            &#123;\n                if(s.top() &#x3D;&#x3D; key[j])\n                &#123;\n                    s.pop();\n                    continue;\n                &#125;\n                else\n                &#123;\n                    flag &#x3D; false;\n                    break;\n                &#125;\n            &#125;\n        &#125;\n        if(flag)\n        &#123;\n            printf(&quot;Yes\\n&quot;);\n        &#125;\n        else printf(&quot;No\\n&quot;);\n    &#125;\n\n    return 0;\n&#125;</code></pre>\n\n<h2 id=\"第二题：学院通知\"><a href=\"#第二题：学院通知\" class=\"headerlink\" title=\"第二题：学院通知\"></a><strong>第二题：学院通知</strong></h2><p>学院有n个学生，每个学生可以通知其余若干学生。通知不一定是相互的，即a能通知b、b不一定能通知a。</p>\n<p>现在，学院要发布一个重要的通知，必须通知学院的所有学生。问最少需要通知多少学生、才可能确保通知到学院里所有学生。</p>\n<h3 id=\"输入格式-1\"><a href=\"#输入格式-1\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第一行有两个整数n和m， 表示n 个学生（编号1~n）和m种通知方式，n≤500，m≤100000。</p>\n<p>以下m行，每行两个整数有a和b，表示a能通知b， 1≤a,b≤n。</p>\n<h3 id=\"输出格式-1\"><a href=\"#输出格式-1\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>一行 最少需要通知的学生人数。</p>\n<h3 id=\"输入样例-1\"><a href=\"#输入样例-1\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">6 5\n1 2\n2 3\n3 1\n6 5\n6 5</code></pre>\n\n<h3 id=\"输出样例-1\"><a href=\"#输出样例-1\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">3</code></pre>\n\n<h3 id=\"题目解析-1\"><a href=\"#题目解析-1\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：tarjan算法求有向图强连通分量\"><a href=\"#方法一：tarjan算法求有向图强连通分量\" class=\"headerlink\" title=\"方法一：tarjan算法求有向图强连通分量\"></a>方法一：tarjan算法求有向图强连通分量</h4><h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"></code></pre>\n\n<h2 id=\"第三题：前缀查询\"><a href=\"#第三题：前缀查询\" class=\"headerlink\" title=\"第三题：前缀查询\"></a><strong>第三题：前缀查询</strong></h2><p>已知有n个单词，单词均由小写字母构成。给出一个字符串，请统计以该字符串为前缀的单词的数量。规定：一个单词是其自身的前缀。单词和字符串都不空，长度都不超过20。</p>\n<h3 id=\"输入格式-2\"><a href=\"#输入格式-2\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行包含两个整数n和m，n≤10000,m≤10000，分别表示单词的个数和查询的个数。<br>接下来的n行，每行一个单词。<br>接下来的m行，每行一个字符串。</p>\n<h3 id=\"输出格式-2\"><a href=\"#输出格式-2\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>多行，每行一个整数，对应查询字符串的统计数量。</p>\n<h3 id=\"输入样例-2\"><a href=\"#输入样例-2\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2 2\nabc\nacd\na\nac</code></pre>\n\n<h3 id=\"输出样例-2\"><a href=\"#输出样例-2\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">2\n1</code></pre>\n\n<h3 id=\"题目解析-2\"><a href=\"#题目解析-2\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：字典树\"><a href=\"#方法一：字典树\" class=\"headerlink\" title=\"方法一：字典树\"></a>方法一：字典树</h4><h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">\n#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n\nusing namespace std;\n\nconst int maxn &#x3D; 1e5 + 5;\n\nint n, m, tot, tag[maxn];\nint trie[maxn][27];\n\nint getnum(char ch)\n&#123;\n    return ch - &#39;a&#39; + 1;\n&#125;\n\nvoid insert(char *s)\n&#123;\n    int len &#x3D; strlen(s + 1), p &#x3D; 0;\n    for (int i &#x3D; 1; i &lt;&#x3D; len; i++)\n    &#123;\n        if (!trie[p][getnum(s[i])])\n            trie[p][getnum(s[i])] &#x3D; ++tot;\n        p &#x3D; trie[p][getnum(s[i])];\n        tag[p]++;\n    &#125;\n&#125;\n\nint query(char *s)\n&#123;\n    int len &#x3D; strlen(s + 1), p &#x3D; 0;\n    for (int i &#x3D; 1; i &lt;&#x3D; len; i++)\n    &#123;\n        if (!trie[p][getnum(s[i])])\n            return 0;\n        p &#x3D; trie[p][getnum(s[i])];\n    &#125;\n    return tag[p];\n&#125;\n\nchar s[maxn];\n\nint main()\n&#123;\n    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);\n\n    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)\n    &#123;\n        cin &gt;&gt; (s + 1);\n        insert(s);\n    &#125;\n\n    for (int i &#x3D; 1; i &lt;&#x3D; m; i++)\n    &#123;\n        cin &gt;&gt; (s + 1);\n        printf(&quot;%d\\n&quot;, query(s));\n    &#125;\n&#125;\n</code></pre>\n\n<h2 id=\"第四题：数据结构设计I\"><a href=\"#第四题：数据结构设计I\" class=\"headerlink\" title=\"第四题：数据结构设计I\"></a><strong>第四题：数据结构设计I</strong></h2><p>小唐正在学习数据结构。他尝试应用数据结构理论处理数据。最近，他接到一个任务，要求维护一个动态数据表，并支持如下操作：</p>\n<ol>\n<li>插入操作（I）：从表的一端插入一个整数。</li>\n<li>删除操作（D）：从表的另一端删除一个整数。</li>\n<li>取反操作（R）：把当前表中的所有整数都变成相反数。</li>\n<li>取最大值操作（M）：取当前表中的最大值。 如何高效实现这个动态数据结构呢？</li>\n</ol>\n<h3 id=\"输入格式-3\"><a href=\"#输入格式-3\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>第1行，包含1个整数M，代表操作的个数， 2≤M≤1000000。</p>\n<p>第2到M+1行，每行包含1个操作。每个操作以一个字符开头，可以是I、D、R、M。如果是I操作，格式如下：I x, x代表插入的整数，-10000000≤x≤10000000。<br>。</p>\n<h3 id=\"输出格式-3\"><a href=\"#输出格式-3\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>若干行，每行1个整数，对应M操作的返回值。如果M和D操作时队列为空，忽略对应操作。</p>\n<h3 id=\"输入样例-3\"><a href=\"#输入样例-3\" class=\"headerlink\" title=\"输入样例\"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>\n<pre class=\"line-numbers language-in\" data-language=\"in\"><code class=\"language-in\">6\nI 6\nR\nI 2\nM\nD\nM</code></pre>\n\n<h3 id=\"输出样例-3\"><a href=\"#输出样例-3\" class=\"headerlink\" title=\"输出样例\"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>\n<pre class=\"line-numbers language-out\" data-language=\"out\"><code class=\"language-out\">2\n2</code></pre>\n\n<h3 id=\"题目解析-3\"><a href=\"#题目解析-3\" class=\"headerlink\" title=\"题目解析\"></a>题目解析</h3><h4 id=\"方法一：multiset和deque\"><a href=\"#方法一：multiset和deque\" class=\"headerlink\" title=\"方法一：multiset和deque\"></a>方法一：multiset和deque</h4><p>使用bool变量flag控制取反操作，使用multiset求最大，deque进行队首队尾的删除操作。</p>\n<h5 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;queue&gt;\n#include&lt;set&gt;\n\nusing namespace std;\n\nmultiset&lt;int,greater&lt;int&gt;&gt; s;\nmultiset&lt;int,greater&lt;int&gt;&gt; s_con;\ndeque&lt;int&gt; list;\ndeque&lt;int&gt; list_con;\n\nint main()\n&#123;\n    bool flag&#x3D;true;\n    int n&#x3D;0;\n    scanf(&quot;%d&quot;,&amp;n);getchar();\n    char choice&#x3D;0;\n    int x&#x3D;0;\n    for(int i&#x3D;0;i&lt;n;++i)&#123;\n        scanf(&quot;%c&quot;,&amp;choice);getchar();\n        if(choice&#x3D;&#x3D;&#39;I&#39;)&#123;\n            scanf(&quot;%d&quot;,&amp;x);getchar();\n            list.push_front(flag?x:-x);\n            list_con.push_front(flag?-x:x);\n            s.insert(flag?x:-x);\n            s_con.insert(flag?-x:x);\n        &#125;else if(choice&#x3D;&#x3D;&#39;D&#39;)&#123;\n            if(!list.empty())&#123;\n                auto target&#x3D;s.find(list.back());\n                auto target_con&#x3D;s_con.find(list_con.back());\n                s.erase(target);\n                s_con.erase(target_con);\n                list.pop_back();\n                list_con.pop_back();\n            &#125;\n        &#125;else if (choice&#x3D;&#x3D;&#39;R&#39;)\n        &#123;\n            flag&#x3D;!flag;\n\n        &#125;else if (choice&#x3D;&#x3D;&#39;M&#39;)\n        &#123;\n            if(!list.empty())&#123;\n                printf(&quot;%d\\n&quot;,flag?*s.begin():*s_con.begin());\n            &#125;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n</code></pre>\n\n","text":"第一题：序列调度有一个N个数的序列A：1，2，……，N。有一个后进先出容器D，容器的容量为C。如果给出一个由1到N组成的序列，那么可否由A使用容器D的插入和删除操作得到。 输入格式第1行，2个整数T和C，空格分隔，分别表示询问的组数和容器的容量，1≤T≤10，1≤C≤N。 第2到...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":7,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":15,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":7,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98%EF%BC%9A%E5%BA%8F%E5%88%97%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">第一题：序列调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%A0%88%E6%A8%A1%E6%8B%9F%E6%B3%95\"><span class=\"toc-text\">方法一：栈模拟法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98%EF%BC%9A%E5%AD%A6%E9%99%A2%E9%80%9A%E7%9F%A5\"><span class=\"toc-text\">第二题：学院通知</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-1\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9Atarjan%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%89%E5%90%91%E5%9B%BE%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\"><span class=\"toc-text\">方法一：tarjan算法求有向图强连通分量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%A2%98%EF%BC%9A%E5%89%8D%E7%BC%80%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">第三题：前缀查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-2\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-2\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E5%AD%97%E5%85%B8%E6%A0%91\"><span class=\"toc-text\">方法一：字典树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%A2%98%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1I\"><span class=\"toc-text\">第四题：数据结构设计I</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F-3\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输入样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">输出样例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90-3\"><span class=\"toc-text\">题目解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9Amultiset%E5%92%8Cdeque\"><span class=\"toc-text\">方法一：multiset和deque</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\">代码实现</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP第一次上机实验","uid":"303d0eaf42ba439d91837affe3563545","slug":"CPP第一次上机实验","date":"2022-09-08T01:53:00.000Z","updated":"2023-02-28T17:40:55.286Z","comments":true,"path":"api/articles/CPP第一次上机实验.json","keywords":null,"cover":null,"text":"题目要求第一个题目要求利用位运算的知识 并通过位运算的方式完成十进制加减乘法； 第二个题目要求计算1000！，结果超过两千位，远超int或者long long所能储存的值，应使用高精度乘法算法进行计算。 主要流程及解决思路第一题：位运算共包括六种：与（&amp;）， 或（|）， ...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"C&C++","slug":"C-C","count":8,"path":"api/categories/C-C.json"}],"tags":[{"name":"CPP","slug":"CPP","count":8,"path":"api/tags/CPP.json"},{"name":"编程","slug":"编程","count":15,"path":"api/tags/编程.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据结构第六次上机实验","uid":"92dcc63de0a91e6ef330681692883b4c","slug":"数据结构第六次上机实验","date":"2022-09-06T04:02:32.000Z","updated":"2023-02-28T17:40:59.563Z","comments":true,"path":"api/articles/数据结构第六次上机实验.json","keywords":null,"cover":null,"text":"第一题：稀疏矩阵之差矩阵A和B都是稀疏矩阵。请计算矩阵的差A-B.如果A、B不能计算差值，输出”Illegal!” 输入格式矩阵的输入采用三元组表示，先A后B。对每个矩阵： 第1行，3个整数N、M、t，用空格分隔，分别表示矩阵的行数、列数和非0数据项数，10≤N、M≤50000，...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":7,"path":"api/categories/数据结构.json"}],"tags":[{"name":"编程","slug":"编程","count":15,"path":"api/tags/编程.json"},{"name":"数据结构","slug":"数据结构","count":7,"path":"api/tags/数据结构.json"}],"author":{"name":"Leo Meng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/LeoMeng86","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}